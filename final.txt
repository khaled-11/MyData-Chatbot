We created a writable stream, then wrote some data to 
the stream. We have included a log statement when the 
"finish" event is emitted, letting us know that all data 
has been flushed to the underlying system. In this case, 
that means all data has been written to the file 
system. Given the performance advantages, streams are a technique you 
will see used widely in Node.js territory, not just for 
file writing. Another example would be using streams to receive 
data from a network connection. Error Handling when Writing to 
a File When writing to files, many different errors can 
occur during input/output. Your code should address these potentia errors. 
One simple thing to do is to throw the errors 
as Node.js exceptions. This crashes the program, and is therefore 
not recommended except in cases where you have little other 
recourse. For example, if the error can only occur as 
a programmer mistake, also known as a bug, then crashing 
the program may be the best response since it alerts 
the programmer of the error right away and doesn't hide 
the error. When you are dealing with operational errors, such 
as specifying a path that is inaccessible, then there are 
two approaches to take. One is to call a callback 
function with the error. In the callback, you then include 
some logic of handling the error, such as logging it. 
