11:54 LTE Special cases. boundaries. and error conditions: Are there 
any special cases? How should we handle boundary cases such 
as empty lines and empty files? How should different error 
conditions be handled? It is common. although not good practice, 
to not have all of these requirements completely specified until 
the detailed design or even the 32 implementation stages For 
our program, we do not treat empty lines in any 
special manner except to specify that when the input file 
is empty the output file should be created but empty. 
We do not specify any specia error-handling mechanism as long 
as all errors are signaled to the user and the 
input file is not corrupted in any way, 1.1.3 Nonfunetional 
Requirements The thinking process involved in nonfunctional requirements can be 
informally summarized as follows: Performance requirements: Although it is not 
as important as most people may think, performance is always 
an issue. The program needs to finish most or all 
inputs within a certain amount of time. For our sorting 
problem, we define the performance requirements as taking less than 
1 minute to sort a file of 100 lines of 
100 characters each. Real-time requirements: When a program needs to 
perform in real- time, which means it must complete the 
processing within a given amount of time. performance is an 
issue. The variability of the running time is also a 
big issue. We may need to choose an algorithm with 
a less than average performance, if it has a better 
worst-case performance, For example, Quick Sort is regarded as one 
of the fastest sorting algorithms; however, for some inputs, it 
can have poor performance. In algorithmic terms. its expected running 
time is on the order of n log(n), but its 
worst-case performance is on the order of n squared. If 
you have real-time requirements in which the average case is 
acceptable but the worst case is not, then you may 
want to choose an algorithm with less variability, such as 
Heap Sort or Merge Sort. Run- time performance analysis is 
discussed further in Main and Savitch (2010) Modifiability requirements: Before 
writing a program, it is important to know the life 
expectancy of the program and whether there is any plan 
to modify the program. If the program is to be 
used only once. then modifiability is not a big issue. 
On the other hand. if it is going to be 
used for 10 years or more, then we need to 
worry about making it easy to maintain and modify. Surely 
the requirements will change during that 10-year period If we 
know that there are plans to exterl the program in 
certain ways, or that the requirements will change in specific 
ways, then we should prepare the program for those modifications 
as the program is designed and implemented. Notice that even 
if the modifiability requirements are low, this is not a 
license to write bad code understand the 